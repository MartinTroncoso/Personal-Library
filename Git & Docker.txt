############### GIT ###############
# Crear repositorio
git init

# Seguir cambios
git status
git add archivo.py
git commit -m "agrego función suma"

# Conectar a GitHub
git remote add origin https://github.com/usuario/repositorio.git
git push -u origin main

# Crear branch
git checkout -b nueva-feature

# Fusionar cambios
git checkout main
git merge nueva-feature

# Cambiar nombre de la Branch
git branch -M <nombre_nuevo>

============================================================================================================================================================================================================================================

############### DOCKER ###############
--> Dockerfile <--
# Imagen base con Python
FROM python:3.11-slim

# Setea directorio de trabajo
WORKDIR /app

# Copia los archivos de requerimientos
COPY requirements.txt .

# Instala dependencias
RUN pip install --no-cache-dir -r requirements.txt

# Copia todo el proyecto
COPY . .

# Expone el puerto
EXPOSE 8000

# Comando por defecto al iniciar el contenedor
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]



--> docker-compose.yml <--
version: '3.9'

services:
  web:
    build: .
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      - DEBUG=1
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db

  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data/

volumes:
  pgdata:



--> requirements.txt <--
Django>=4.2
psycopg2-binary



--> settings.py <--
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'postgres'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'postgres'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': '5432',
    }
}



COMANDOS A CORRER:
	Construir las imágenes --> docker-compose build
	Levantar el servidor --> docker-compose up (acceder a http://localhost:8000)
	Si se quiere eliminar todo para volver a buildear --> docker-compose down --volumes --remove-orphans
